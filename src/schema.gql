# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DeliveryEmployee {
  id: ID!
  documentNumber: String!
  name: String!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  orders: [Order!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Brand {
  id: ID!
  code: String!
  name: String!
  description: String!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  products: [Product!]!
}

type Category {
  id: ID!
  code: String!
  name: String!
  description: String!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  products: [Product!]!
}

type Product {
  id: ID!
  code: String!
  name: String!
  enable: Boolean!
  salesQuantity: Float!
  stock: Float!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  category: Category!
  brand: Brand!
}

type OrderDetail {
  id: ID!
  quantity: Float!
  detailDescription: String!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  order: Order!
}

type Order {
  id: ID!
  orderNumber: Float!
  deliveryMan: String!
  deliveryAddress: String!
  observation: String
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  employee: Employee!
  customer: Customer!
  deliveryEmployee: DeliveryEmployee!
  orderDetails: [OrderDetail!]!
}

type Customer {
  id: ID!
  documentNumber: String!
  name: String!
  lastName: String!
  address: String!
  phone: String!
  active: Boolean!
  bornDate: DateTime!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  orders: [Order!]!
  city: City!
}

type Department {
  id: ID!
  idDepartment: String!
  name: String!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
}

type City {
  id: ID!
  idCity: String!
  name: String!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  employees: [Employee!]!
  department: Department!
  customers: [Customer!]!
}

type EmployeeType {
  id: ID!
  code: String!
  roles: [String!]!
  description: String!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
}

type User {
  id: ID!
  userName: String!
  isActive: Boolean!
  lastUpdateBy: User
  employee: Employee!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
}

type Employee {
  id: ID!
  documentNumber: String!
  name: String!
  lastName: String!
  address: String!
  neighborhood: String!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
  orders: [Order!]!
  city: City!
}

type AuthResponse {
  token: String!
  user: User!
}

type Query {
  revalite: AuthResponse!

  """return all user by user input"""
  users(roles: [ValidRoles!] = []): [User!]!

  """return all user by user input"""
  findUserByID(userId: String!): User!
  employeeTypes: [EmployeeType!]!
  employeeType(id: ID!): EmployeeType!
  employees: [Employee!]!
  employee(id: ID!): Employee!
  orders: [Order!]!
  order(id: ID!): Order!
  departments: [Department!]!
  department(id: ID!): Department!
  cities: [City!]!
  city(id: ID!): City!
  customers: [Customer!]!
  customer(id: ID!): Customer!
  products: [Product!]!
  product(id: ID!): Product!
  categories: [Category!]!
  category(id: ID!): Category!
  orderDetails: [OrderDetail!]!
  orderDetail(id: ID!): OrderDetail!
  deliveryEmployee(id: ID!): DeliveryEmployee!
  brands: [Brand!]!
  brand(id: ID!): Brand!
}

"""roles that exist"""
enum ValidRoles {
  sadmin
  adminManager
  adminEmployee
  employee
  deliveryEmployee
  user
}

type Mutation {
  signUp(signUpInput: CreateUserInput!): AuthResponse!
  logIn(logInInput: LogInInput!): AuthResponse!
  updateUser(updateUserInput: UpdateUserInput!): User!
  blockUser(id: ID!): User!
  createEmployeeType(createEmployeeTypeInput: CreateEmployeeTypeInput!): EmployeeType!
  updateEmployeeType(updateEmployeeTypeInput: UpdateEmployeeTypeInput!): EmployeeType!
  removeEmployeeType(id: ID!): EmployeeType!
  createEmployee(createEmployeeInput: CreateEmployeeInput!): Employee!
  updateEmployee(updateEmployeeInput: UpdateEmployeeInput!): Employee!
  removeEmployee(id: ID!): Employee!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  removeOrder(id: ID!): Order!
  createDepartment(createDepartmentInput: CreateDepartmentInput!): Department!
  updateDepartment(updateDepartmentInput: UpdateDepartmentInput!): Department!
  removeDepartment(id: ID!): Department!
  createCity(createCityInput: CreateCityInput!): City!
  updateCity(updateCityInput: UpdateCityInput!): City!
  removeCity(id: ID!): City!
  createCustomer(createCustomerInput: CreateCustomerInput!): Customer!
  updateCustomer(updateCustomerInput: UpdateCustomerInput!): Customer!
  removeCustomer(id: ID!): Customer!
  createProduct(createProductInput: CreateProductInput!): Product!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  removeProduct(id: ID!): Product!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: ID!): Category!
  createOrderDetail(createOrderDetailInput: CreateOrderDetailInput!): OrderDetail!
  updateOrderDetail(updateOrderDetailInput: UpdateOrderDetailInput!): OrderDetail!
  removeOrderDetail(id: ID!): OrderDetail!
  createDeliveryEmployee(createDeliveryEmployeeInput: CreateDeliveryEmployeeInput!): DeliveryEmployee!
  updateDeliveryEmployee(updateDeliveryEmployeeInput: UpdateDeliveryEmployeeInput!): DeliveryEmployee!
  removeDeliveryEmployee(id: ID!): DeliveryEmployee!
  createBrand(createBrandInput: CreateBrandInput!): Brand!
  updateBrand(updateBrandInput: UpdateBrandInput!): Brand!
  removeBrand(id: ID!): Brand!
}

input CreateUserInput {
  userName: String!
  password: String!
  name: String!
  lastName: String!
  documentNumber: String!
  address: String!
  neighborhood: String!
  typeEmployeeId: ID!
}

input LogInInput {
  userName: String!
  password: String!
}

input UpdateUserInput {
  userName: String
  password: String
  name: String
  lastName: String
  documentNumber: String
  address: String
  neighborhood: String
  typeEmployeeId: ID
  id: ID!
  roles: [ValidRoles!]
  isActive: Boolean
}

input CreateEmployeeTypeInput {
  code: String!
  description: String!
}

input UpdateEmployeeTypeInput {
  code: String
  description: String
  id: ID!
}

input CreateEmployeeInput {
  name: String!
  lastName: String!
  documentNumber: String!
  address: String!
  neighborhood: String!
  tipeEmployeeId: ID!
}

input UpdateEmployeeInput {
  name: String
  lastName: String
  documentNumber: String
  address: String
  neighborhood: String
  tipeEmployeeId: ID
  id: ID!
}

input CreateOrderInput {
  deliveryMan: String!
  deliveryAddress: String!
  observation: String
  employeeId: ID!
}

input UpdateOrderInput {
  deliveryMan: String
  deliveryAddress: String
  observation: String
  employeeId: ID
  id: ID!
}

input CreateDepartmentInput {
  idCity: String!
  name: String!
}

input UpdateDepartmentInput {
  idCity: String
  name: String
  id: ID!
}

input CreateCityInput {
  idCity: String!
  name: String!
}

input UpdateCityInput {
  idCity: String
  name: String
  id: ID!
}

input CreateCustomerInput {
  documentNumber: String!
  name: String!
  lastName: String!
  address: String!
  phone: String!
  bornDate: DateTime!
}

input UpdateCustomerInput {
  documentNumber: String
  name: String
  lastName: String
  address: String
  phone: String
  bornDate: DateTime
  id: ID!
}

input CreateProductInput {
  code: String!
  name: String!
  enable: Boolean!
  salesQuantity: Float!
  stock: Float!
}

input UpdateProductInput {
  code: String
  name: String
  enable: Boolean
  salesQuantity: Float
  stock: Float
  id: ID!
}

input CreateCategoryInput {
  code: String!
  name: String!
}

input UpdateCategoryInput {
  code: String
  name: String
  id: ID!
}

input CreateOrderDetailInput {
  quantity: Float!
  detailDescription: String!
}

input UpdateOrderDetailInput {
  quantity: Float
  detailDescription: String
  id: ID!
}

input CreateDeliveryEmployeeInput {
  name: String!
  lastName: String!
  documentNumber: String!
  address: String!
}

input UpdateDeliveryEmployeeInput {
  name: String
  lastName: String
  documentNumber: String
  address: String
  id: ID!
}

input CreateBrandInput {
  code: String!
  name: String!
  description: String!
}

input UpdateBrandInput {
  code: String
  name: String
  description: String
  id: ID!
}